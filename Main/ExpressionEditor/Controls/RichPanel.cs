// <auto-generated/>

//-------------------------------------------------------------------------------------------------
// <copyright file="RichPanel.cs" company="Konesans Limited">
// Copyright (C) 2010 Konesans Limited.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------------------------------

namespace Konesans.Dts.ExpressionEditor.Controls
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Drawing;
    using System.Text;
    using System.Windows.Forms;

    public partial class RichPanel : Panel
    {
        #region Constructor
        ////public RichPanel() : base()
        ////{
        //    InitializeComponent();
        //    base.BorderStyle = BorderStyle.None;
        //    borderColor = SystemColors.ControlDark;
        ////}
        public RichPanel()
        {
            this.InitializeComponent();

            this.Font = SystemFonts.CaptionFont;

            this.SetStyle(ControlStyles.UserPaint, true);
            this.SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            this.SetStyle(ControlStyles.DoubleBuffer, true);
        }
        #endregion

        #region Gradient
        private Color gradientStartColor = Color.FromKnownColor(KnownColor.InactiveCaptionText);
        private Color gradientEndColor = Color.FromKnownColor(KnownColor.InactiveCaption);
        private System.Drawing.Drawing2D.LinearGradientMode gradientMode = System.Drawing.Drawing2D.LinearGradientMode.Vertical;

        [Description("The starting color of the gradient background"), Category("_Gradient"), Browsable(true)]
        public Color GradientStart
        {
            get
            {
                return this.gradientStartColor;
            }

            set
            {
                this.gradientStartColor = value;
                Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the gradient end color.
        /// </summary>
        /// <value>The gradient end color.</value>
        [Description("The end color of the gradient background"), Category("_Gradient"), Browsable(true)]
        public Color GradientEnd
        {
            get
            {
                return this.gradientEndColor;
            }

            set
            {
                this.gradientEndColor = value;
                Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the gradient direction.
        /// </summary>
        /// <value>The gradient direction.</value>
        [Description("The gradient direction"), Category("_Gradient"), Browsable(true)]
        public System.Drawing.Drawing2D.LinearGradientMode GradientDirection
        {
            get
            {
                return this.gradientMode;
            }

            set
            {
                this.gradientMode = value;
                Invalidate();
            }
        }
        #endregion

        #region Border
        private int borderWidth = 1;
        private bool showBorder = true;
        private Color borderColor = Color.FromKnownColor( KnownColor.ActiveCaption)  ;

        [Description("The width in pixels of the border"), Category("_Border"), Browsable(true)]
        public int BorderWidth
        {
            get
            {
                return this.borderWidth;
            }

            set
            {
                this.borderWidth = value;
                Invalidate();
            }
        }

        [Description("Show the panel border."), Category("_Border"), Browsable(true)]
        public bool ShowBorder
        {
            get
            {
                return this.showBorder;
            }

            set
            {
                this.showBorder = value;
                Invalidate();
            }
        }

        [Description("Color of the border"), Category("_Border"), Browsable(true)]
        public Color BorderColor
        {
            get { return this.borderColor; }
            set
            {
                this.borderColor = value;
                Invalidate();
            }
        }

        #endregion

        #region Caption

        private string caption = "Panel";
        private bool showCaption = true;
        private int captionHeight = 24;
        private Color captionBeginColor = Color.FromArgb(255, 225, 155);
        private Color captionEndColor = Color.FromArgb(255, 165, 78);
        private Color captionTextColor = Color.FromArgb(0, 0, 0);
        private bool antialias = true;
        private System.Drawing.Drawing2D.LinearGradientMode captionGradientMode = System.Drawing.Drawing2D.LinearGradientMode.Vertical;
        private System.Drawing.StringAlignment stringAlignment = System.Drawing.StringAlignment.Near;

        [Description("The gradient direction"), Category("_Caption"), Browsable(true)]
        public System.Drawing.StringAlignment CaptionTextAlignment
        {
            get
            {
                return this.stringAlignment;
            }

            set
            {
                this.stringAlignment = value;
                Invalidate();
            }
        }

        [Description("The gradient direction"), Category("_Caption"), Browsable(true)]
        public System.Drawing.Drawing2D.LinearGradientMode CaptionGradientDirection
        {
            get
            {
                return this.captionGradientMode;
            }

            set
            {
                this.captionGradientMode = value;
                Invalidate();
            }
        }

        [Description("Enable/Disable antialiasing"), Category("_Caption"), Browsable(true)]
        public bool TextAntiAlias
        {
            get
            {
                return this.antialias;
            }

            set
            {
                this.antialias = value;
                Invalidate();
            }
        }

        [Description("The caption"), Category("_Caption"), Browsable(true)]
        public string CaptionText
        {
            get
            {
                return this.caption;
            }

            set
            {
                this.caption = value;
                Invalidate();
            }
        }

        [Description("Enable/Disable the caption"), Category("_Caption"), Browsable(true)]
        public bool Caption
        {
            get
            {
                return this.showCaption;
            }

            set
            {
                this.showCaption = value;
                Invalidate();
            }
        }

        [Description("Change the caption height"), Category("_Caption"), Browsable(true)]
        public int CaptionHeight
        {
            get
            {
                return this.captionHeight;
            }

            set
            {
                this.captionHeight = value;
                Invalidate();
            }
        }

        [Description("Change the caption begincolor"), Category("_Caption"), Browsable(true)]
        public Color CaptionBeginColor
        {
            get
            {
                return this.captionBeginColor;
            }

            set
            {
                this.captionBeginColor = value;
                Invalidate();
            }
        }

        [Description("Change the caption endcolor"), Category("_Caption"), Browsable(true)]
        public Color CaptionEndColor
        {
            get
            {
                return this.captionEndColor;
            }

            set
            {
                this.captionEndColor = value;
                Invalidate();
            }
        }

        [Description("Change the caption textcolor"), Category("_Caption"), Browsable(true)]
        public Color CaptionTextColor
        {
            get
            {
                return this.captionTextColor;
            }

            set
            {
                this.captionTextColor = value;
                Invalidate();
            }
        }

        [Description("Change the caption textcolor"), Category("_Caption"), Browsable(true)]
        public override Font Font
        {
            get
            {
                return base.Font;
            }

            set
            {
                base.Font = value;
                Invalidate();
            }
        }

        #endregion

        #region Icon

        private System.Drawing.Icon icon;
        private bool showIcon;

        [Description("The icon to display in the title"), Category("_Icon"), Browsable(true)]
        public Icon PanelIcon
        {
            get
            {
                return this.icon;
            }

            set
            {
                this.icon = value;
                Invalidate();
            }
        }

        [Description("Enable/Disable the icon"), Category("_Icon"), Browsable(true)]
        public bool ShowIcon
        {
            get
            {
                return this.showIcon;
            }

            set
            {
                this.showIcon = value;
                Invalidate();
            }
        }

        #endregion

        #region Painting
        protected override void OnPaint(PaintEventArgs e)
        {
            // fill the background
            System.Drawing.Drawing2D.LinearGradientBrush brsh = new System.Drawing.Drawing2D.LinearGradientBrush(new Rectangle(0, 0, this.Width, this.Height), this.gradientStartColor, this.gradientEndColor, this.gradientMode);
            e.Graphics.FillRectangle(brsh, 0, 0, this.Width, this.Height);

            // draw the border
            System.Drawing.Pen pen = new Pen(this.borderColor);
            for (int i = 0; i < this.borderWidth; i++)
            {
                e.Graphics.DrawRectangle(pen, i, i, this.Width - 1 - (i * 2), this.Height - 1 - (i * 2));
            }

            // draw caption bar
            if (this.showCaption)
            {
                if (this.antialias)
                {
                    e.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAlias;
                }

                System.Drawing.Drawing2D.LinearGradientBrush brsh_Caption = new System.Drawing.Drawing2D.LinearGradientBrush(new Rectangle(this.borderWidth, this.borderWidth, this.Width - (this.borderWidth * 2), this.captionHeight), this.captionBeginColor, this.captionEndColor, this.captionGradientMode);
                e.Graphics.FillRectangle(brsh_Caption, this.borderWidth, this.borderWidth, this.Width - (this.borderWidth * 2), this.captionHeight);
                StringFormat format = new StringFormat();
                format.FormatFlags = StringFormatFlags.NoWrap;
                format.LineAlignment = StringAlignment.Center;
                format.Alignment = this.stringAlignment;
                format.Trimming = StringTrimming.EllipsisCharacter;
                e.Graphics.DrawString(
                    this.caption,
                    this.Font,
                    new SolidBrush(this.captionTextColor),
                    new Rectangle(

                    // LEFT
                        (this.showIcon ?
                            this.borderWidth + this.icon.Width + ((this.captionHeight / 2) - (this.icon.Height / 2))
                            :
                            this.borderWidth),

                    // TOP
                            this.borderWidth,

                    // WIDTH
                            (this.showIcon ?
                                this.Width - (this.borderWidth * 2) - ((this.captionHeight / 2) - (this.icon.Height / 2)) - this.icon.Width
                                :
                                this.Width - (this.borderWidth * 2)),

                    // HEIGHT
                        this.captionHeight)
                        , format);
            }

            // draw the icon
            if (this.showIcon && this.showCaption)
            {
                e.Graphics.DrawIcon(this.icon, this.borderWidth + ((this.captionHeight / 2) - (this.icon.Height / 2)), (this.borderWidth) + ((this.captionHeight / 2) - (this.icon.Height / 2)));
            }

            base.OnPaint(e);
        }
        #endregion

        #region Overrides
        protected override void OnResize(EventArgs e)
        {
            Invalidate();
            base.OnResize(e);
        }
        #endregion
    }
}
